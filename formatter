#!/usr/bin/env python3
import os
import hashlib
import json
import subprocess
import argparse
from pathlib import Path

HASH_STORE_FILE = '.beautified_hashes.json'

def format_java_file(file_path, jar_path):
    try:
        subprocess.run(["java", "-jar", jar_path, "-i", file_path], check=True)
        print(f"Formatted: {file_path}")
    except subprocess.CalledProcessError as e:
        print(f"Error: Could not format {file_path}\n{e}")

def calculate_file_hash(filepath):
    sha256 = hashlib.sha256()
    with open(filepath, 'rb') as f:
        while chunk := f.read(8192):
            sha256.update(chunk)
    return sha256.hexdigest()

def load_hashes():
    if not os.path.exists(HASH_STORE_FILE):
        return {}
    with open(HASH_STORE_FILE, 'r') as f:
        return json.load(f)

def save_hashes(hashes):
    with open(HASH_STORE_FILE, 'w') as f:
        json.dump(hashes, f, indent=2)

def find_jar_in_default_location():
    default_dir = os.path.expanduser("~/.formatter/")
    jars = list(Path(default_dir).glob("*.jar"))
    return str(jars[0]) if jars else None

def process_folder(folder_path, jar_path):
    hashes = load_hashes()
    folder_path = Path(folder_path)

    for filepath in folder_path.rglob("*.java"):
        if filepath.is_file():
            relative_path = str(filepath.relative_to(folder_path))
            current_hash = calculate_file_hash(filepath)

            if hashes.get(relative_path) != current_hash:
                print(f"Beautifying {relative_path}...")
                format_java_file(str(filepath), jar_path)
                new_hash = calculate_file_hash(filepath)
                hashes[relative_path] = new_hash
            else:
                print(f"Skipping {relative_path} (no changes)")

    save_hashes(hashes)

def main():
    parser = argparse.ArgumentParser(description="Format Java files using google-java-format.")
    parser.add_argument("--jarpath", type=str, help="Path to google-java-format jar file.")
    parser.add_argument("--dir", type=str, help="Path to directory to format.", default=os.getcwd())

    args = parser.parse_args()

    jar_path = args.jarpath or find_jar_in_default_location()
    if not jar_path or not Path(jar_path).is_file():
        print("❌ Error: google-java-format JAR not found.")
        print("→ Please provide it using --jarpath or place it under ~/.formatter/")
        return

    directory_path = args.dir
    if not Path(directory_path).is_dir():
        print(f"❌ Error: Provided directory does not exist: {directory_path}")
        return

    process_folder(directory_path, jar_path)

if __name__ == "__main__":
    main()
